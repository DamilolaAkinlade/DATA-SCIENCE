{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e63a653c",
   "metadata": {},
   "source": [
    "## INTRO TO NUMPY FOR DATA COMPUTATIONS\n",
    "\n",
    "this is notebook is for performing data computations with NumPy. NumPy is a scientific tool used to make mathematical computations easily.\n",
    "\n",
    "in this lab, you will learn to:\n",
    "\n",
    "\n",
    "- 1. Arrays in Numpy\n",
    "- 2. Create a NumPy array\n",
    "- 3. Select data: Indexing and Slicing of array\n",
    "- 4. Perform mathematical and other basic operations\n",
    "- 5. Perform basic statistics\n",
    "- 6. Manipulate data"
   ]
  },
  {
   "cell_type": "raw",
   "id": "634097ea",
   "metadata": {},
   "source": [
    "if you are using Google Colab,we do not need to install NumPy. we will only have to import it just like this;\n",
    "\n",
    "`import numpy as np`\n",
    "\n",
    "if you are using local Jupyter notebooks,make sure you have instaalled it already"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f99854c",
   "metadata": {},
   "source": [
    "## Arrays in NumPy\n",
    "\n",
    "what is an array in Numpy?\n",
    "- like list in python an array is a data structure in NumPy.\n",
    "- An array in NumPy can hold collection of ordered elements.\n",
    "- An array in NumPy can only hold data of same type."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6dd8ab9f",
   "metadata": {},
   "source": [
    "b><u> More Information About Arrays </b></u>\n",
    " \n",
    "    * You might occasionally hear an array being referred to as <b> ndarray, </b> which is shorthand for <b> 'N-dimensional array'</b> .\n",
    "    * An N-dimensional array is an array with n number of dimensions, for example 1-D or one dimensional array, 2-D or two dimensional array, and so on\n"
   ]
  },
  {
   "attachments": {
    "image_numpy_array%20%281%29.png": {
     "image/png": "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xQRoTVrK6rxXRiQVY8AQg8AzucjVpV7c/NLChXe1tbWde+65s2aebtu2BK0RGOEHCriIGYbx7rvvLlq06KWXXpox4/RLLrmksTHf3l4wODNMThp93wcAy7ERuZQSuYGIyJnWOggiKaUwTccx/VASdsvMGkRKuynT90OvVM7lclKGjz766F2/+41JYX1dzjTNI62txWJxyLHHzp8/f9bsuYZhUTVBDNUcOAAAY9zQGrSWRMQQ47dda8kILMsC1J7ngaZ4dH0QBJlc9r777lu9evWAAQPmzp07cuTIuGKyx/mqdbEicArfeGXjE48tbT3cesH58y86//zGpjxo7VpMKzA4aCUNzgC0jKLQ99xMFuADdnHxoFVEFOKv036QCLiEhISEhKMYIvrFL35x4403FgqF73znO6effvr06dPb2trq6+uh1sfwy1/+8uWXX77rrjsBoEuVVWmYAAAgAElEQVTAQXcZXLeA+/cFv9i5e9913/1n4I5EtEy7paWlvr4ekf3kJz9dvnz53LlnXnvN37W0tWazuXxDrrPDL1bKKTdjmmbF9xCRiLomdMWmrx95n9XANHa1iGokAtScNCMtOBY6Oh64756HFj3Qq7Hh/PPPP2PW6cNHjjjU2qqQITECBsQJGQADYpUgcBzHspkkiCJQShIRABWLxebeDZEftbe3Oo7jpmwksCxjz+7d99xzz9atr06fPv0zF17Ut28/z/OUUro6rDQ2RulWHo7jtLS09O3b9M47+xcsuPnQoUOXX375tKmfqs/n2traoijK5LK25VYqFd8PgSEwwTkHhogohMk5+KHyPM9y7O45qz2olMrpdIpzHkWRMBgA7Htn9443Xnvr9VfDwBPCHDBw4OjRowcfOzSTySnSYRj2VG/QQ8AFQcQYOI6jlSoWi4iUSqVUGGmtNUnOuWPZANDe3t7a2vqjG348cODAiRMnTpgwoU/vfrpqyNJztJoGAKqayamMAaj9NatWL1n6kGtbX77m6jPnzXIMQAKDAQKUS0XB0HXt2pWJUmoAiPP4Wuu/lnSLSQRcQkJCQsJRiVLq2Weffemll37zm980NDSceuqpCxcunD179uc+97lRo0YNHDiwXC6nUikAuOOOO1atWvXgg/cDAAHr6eLLAaAm4CJiP/rZL3fs3vftf/oXEFYQRkpRr16ZwIODBw9k05n9+/ffe++9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dDT2BgCUUsdxwuFwJpN58cUX33333bVr127ZssW2bVmWhZkcAPTp0+fyyy8/77zzxo4dGwqFgixRSqkIDS9cuBBjfPfdd/fr12/BggWLFi365JNPKKUzZ86cM2eOoijJZPInP/nJgQMHBgwYcO+9965bt+7JJ59cu3atZVnRaLR///6iaa4Y9tVXX33zzTdXr169Zs0aAAiFQkKy9n2/qKho9uzZU6dOnTp1qmCQruvGYrFnnnlm1apVrutOmjSptra2d+/eYihB4IIHR0LISy+9dN999+3evZsxdvfdd5966qkF9lZAAQUUcMIheosrus49VlJSMmXatEgk8u1vf/uySy+dPHlSdXW18MIAzk3TJBgnW9uwJEeiEVWHTA7a27OSrBQX6VbGy1vvIi4ElhNlGHEYOtibCM8xmcglRYmD+5qNkN63ItHe7jq+R5AOMhECQWBrJ8uyYRiHFsBiMV8GSJIIpzwUks6YeNagQYNWLH978QsvzZ595SWXzjJtqyiRiMSguZVlUimRWEV9SghRFRlLiHPwfSoo42dSoU5u6psAy2fYIeGELFYp5qEoiud5uVwOcarrelE8aptWc3OjgngoFFJUI2faPnLjidj2fXsWL5zv5lKJaKiiomLc+DMcz89l2l2GI8XFtteZMycKSoRyVlKSyGRMx7LD4XDYUHI5hzHfCCmp9kbPw4YejkZCTY2tsXhRc3NzeXlZznI6ZnfInulumSoeMGDAFVdcccEFFwTmvbZt27Z9XDvwqBAD6ro+YsSIGTNm9OrVS5KklpaW119/vbm5GTqS6o4xQigUEjTo6aef/vnPf/7www+/++67lmXJsqzreigUikajiqLs2bPnwQcfvO22255//nkACLo7IIQGDRq0Y8cOhFAqlcpms48++uh99923fft2Smk8Hg+Hw8KRzvO8ffv2JZPJ/fv3p9PpRYsWLVu2zLIswa40TfM8z/f9TCbz8ssv33333f/3f/8n2JuiKNFoVJblWCwmy3Jzc/PDDz989dVXP/LIIwBACFEUZciQIaNGjcpkMqlUavPmze+++25wIQVnfNC1YtWqVfv3729vbweAYcOGJRKJY++iAgoooIACjgOu67qWBQCKIokQzTe+8Y2f//Kh9zZsuPfenzz11HzPoxjjTCajyHIsFi4rK4rFIq7rNzZmslnLMAxFUZJJV/j9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3Asv+u1pp56cKI5TgiccOf6G668zSks+fH/myuXLJGcEg67rAOC6rhBC1xVNQ5lMZvXq1c8//viRRx55//33d+nShSeTfk2eXC63v+7Jt3MPpJRS8hf/Ne3jd98dMmbMZZddNmTIECGgW7du5557fr+hQ5fMnj1r1ixCqBHQAIRtASEkkQiuX5sMBWgsEmlubn7g978XjN99992jR43SozEppRQCSdAVFQNy9tF9tZtEHFVVuSslFxgQc+3Zsz5dt3DBkDFjLr3i8p49e0YikYGDB11yySWjDj981dKlb7/1BpICkAAkCoTrFixatGj6629EKqtvvfW20WPHEELi8XhVVdVll12mhEILFy7ctm2bbXPJJQjWmlj5Mw4U0qkUIGQYhhDCcTw/rsY8qato2KD+jz547w1XXf7ZR+9dddlF7771qmdmiGAqliqRSLiObXq2JQUnhEAbV7BA6Adx8QrYqZfatg2UmKa5es2ahqZmhJDHGUJo5MgRA0cdNuujj9PpdCbDQMhAAPZ2XRAI8vm8YZBIJOhrBfsyJStWbe/YpfODDz545ZVXvvrqq2efffb8+fNLS4tyubxhGOFIyAjoUnDHsbg/ePz8YJ/b1xo8/fbpoIVnIv3wERY+NRsVGrMnIAkYCcRdYA4CplOkq4pKCUIol8s98MADTzzxRK9evW644YZhww9xGBcIXM/r1q1HeUVlUzKVyZvBYFDVNb7bxNk9BAaRBAwiHAlmUo3p5uTC+Z9TisaMPCzZVBcJGIlEork59e9//6dH914HH3zwtvoGIxj81vq17/6gfXPP7MaG80uwWZal67rruqlUyjTNjz/++Nlnp/bq3f/Y40+orE5wzh1HIoRcF3zyiH98KyvnJ8hJV1XVZR7jAAT7jrTR48add955ffr0MQzdtm1d17GE3j17te/USTMCtm0zxtqyUOEAxU99MM9RKc2kmutWryyvqR42dIjneUFDDxo6pXTkiOFFZaVffrWooaHO//CBaifGuLm5+dxzz33ppZcOOqivz7UkhAhRyBXzrZb6+vrPP/8cKB01apSmaa7rNjUlc7lceXl5z549eSq1YMGC1sotvuXneeCXi/mfghDCD7JjjEkb6LoeCoVisZjrus8///xXX31VX18PAOPGjQuFQowx/274Hjuy1+4WkTdtAJE3s4vmfQ4EDRrYX9c1yT1N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GwOsKSOuwza//PyECeOoLX70ox/c851vQ6UKUyY/kM4qHRw1bz7jTpj4ccwoQyG4SvbCQ29ILncr2m6e2OFPq2mtEML3G6gg46Qtbuk4oYBZz64O9hEd2RbpybmbX3lu5U/v6tu++cjZh5510qVz58yePCFPoB18RgDWZjzZkSSU/q0BOGOvCSB20Iba/yYw0hrl91j/TBE02WfNJkMJEJ2+vu9a8zdgr78/ENjN6NPymw77bqf/s/2v87fUpndsc6eVtF0K19rzzYE+u0m12dk07kxiDENwUw//1o7npGH3C863bITNlKYBQBiGP//5zy+77DJDIzJv3rzTTz/9yCOPvOeeezZs2LB06dI1a9aMGzfu6KOPHj9+POccES+55JIjjjjiZz/72apVq+6///5LL730tNNOM4dFxI5yw076Pa0yONwZw4FJGdOaUkopxEpTSg85cPo/fODKk0466dbv/uDWb3/zoIMOPvXMd4yfOJUK22KiVq8UigVheWGQ1Mp1SqntCFCyPBi+CjXdiFiz2XQdm2iMpVy3bh0oNWX2nHnzjurv7//tbx/+0NX/eM2H/+mMM4/7/R+3e17aS6XDOGkToLSeZWyfMrTlvKD9jGOLB3gX7QAASkHKxMBuRgFRoVYEdP9A35w5hzz6yIYffPe7G599dsz0qYV8duO6dY1Yrfnl6nnzjxIMFTKNMQCJ45iRvc7l7Wjet4BE6w4iJcY9BEPnA9CsN7oKOU5Zo1Jt1quebTGAZrU+qacIkjUapdU/Xbn216tmTJ/6L9dcddThc6Z2Z0yDqIm2sWFXxwRPh3US+NsEcH/R1gaU9NVAEdGtUupRB057nCFNlihBM41iBze85X4bUdPt4f/19YfdWUcpYVdPD7ZTpUegpSNhnV40LK9l941rjbCjHn7E1wmwOoTur34ph0M68haF75tocRwbZkrHcXzf933//PPPX7hw4YMPPvjxj3987ty5hJBKpeK6bhiG119//ac//enzzjsP2rWlRxxxxPjx46dOnbply5bPfOYz69atO+WUU4499th0Op3JZJrNpuM4O9Wo7j5brj09G9IDJrjFqB+Ftm1nM+ljj547b+7cn/383q/9n29s2PDw373rkuOXvM2yvXHduT+9+HKmWMxm0qm0CP0oUQmnzHXtUeXSJ6i1ksVitjzgNxu1gb7tkE0vX37+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qfToo4/ef//9S5YsGT9+/N13333jjTc+88wzhULh8ssvv+iii1KpFABwzl988cXf/va3f/d3fxdFkRDC87xGo9Hd3b18+fI5c+asWrXqpptuOvzww8vl8ty5c6dOnWp0wzvMuoY9BNqM3wCglDIfMkaEsHe6uy00A8AITOzpetcF5x564AF33XXXD2799mMPrz/xlNMPOPxorWlC4nFji6+8vD2X7xIcHIeFASgArYFzYIwhBSlBJxoEAOmkybZQFu7ZCZDJpCr1pFAs2haUKv655y/v29579dVX3/Kdm8eO6S7ms+O6u/xaNaiUBrZty3huM24Y/Yj2QNxy6ndK7rDjCdshnYkaMgMAkwaik0S6HqfcSmTABXLGkiRo1qowaVyjXkm5VmUwclzrD5ue/t53v7tw4cJfrflNLGWhUEil3Kofe65LKaBKhpZ/wwhezK3AYc54TTQSCgS7u7srpVK1HmVzxWK3F4RQryeNpioWnCiinFGtfJBxxqO923p//Jv7nl3/iyXzD7/iomvmz59v1NjMXZZKCSGAABcMAAwkSJLE8zzTl0zlspKSMWYL64UXXujv73/66ac3b968cePGNWvW9PT0XHnllZy6XiqTZZbtx4mMq4EE18vaLgvD1mkQQIZIEM04ohLZTsYd+QFLE0AgmgBFJKARNEHNEAlIy7ZAM8dKEaUpcou5jIb1Sg1TjtxdTELqPWhoDq0eRmPCACq4TtBziM2zVKFOEgkkDvxcJuW5tpZSyyTtup5r18NIRgKUHs327PVWEAuldlMpbaVUokFDyslkvCyDctrL5rNFAJ8yx68nSinbspTS+7zNna3C2EUMQ79aKg8ODsYxWNYepjPyKuB/X5qMY+44AGBbzLZtpeqNWqW/r0yIPYQ/AFQrzQKUIqP3PAKYIAIY9KZNzi6hAOC6biyhWW/oqJlLOUxYXipD3BQSJmwXCLMdz7KdhAiiZBwrpZShlzM5Xu00EQA1iuOJab8mAIhIqG4JIAIBbVsWAsYyjiVGCqQmlDupdDZKlNE+llIpjOM4thA450myT8YTTc06GkADImpASUARlJRSQCSEcEYZgFIAlO6nffovxAxk7wQ3GWNGvaCrq6urq+vCCy8khNx8882bNm366le/+sILL5x77rlxHPf19SmlDOoKgkAIYdwnzz333OrVqw899NAlS5YAQKlU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FJDsdqyDwJlBBQmAhQKq22nvWpiTlpLUuUuX95aufOuNV5a8N2/yrVMqevWoawyGQqG8DimtrWHKkY8GGJNlBExCGREMIpFIHS4mcKCcUTDrjzekJHhOfXP4vQ+WH9i3q3vXwuvHjKws656ocAE4AAv7fZIo2N1uMDS72w1AwERJIYCIrByc+Q6AAOdgMsY5/+CDlYsXL/74k01TpkzpW92nR48ePp8PABobG5OSktasWaPr+vjx41NSUgKBwJ49e/bs2TN27NisrCzc9KL822WQ1BAB4LXXXlu9evX27dvD4bDL5br11ltHjRpVXl7+/vvvv/7664WFhb/5zW9SU1NN05w+ffrbb7/9k5/8pH///g888EBeXt4NN9zQv3//t99++7333jt48GB9fX27du2KioruuuuuAQMGIHcYhQpFUTx58uTevXv//Oc/FxQUAEBqauott9xSW1u7f/9+VVXP2gRfpejWrduQIUMwMBpLUSKEXEgJ5iz/ZRw/ZqCT2+/3JyYm2my2t99+e+HChdu2bWtsbExJSRk2bNi4ceOqq6vr6+v/+7//Oy8v7xe/+AXu83C0lpaWPvPMM3//+98///zz+++/f9iwYStXrpw9e/a2bdtUVdV1vW/fvkOHDr3jjjusX0R3L6W0e/fuv/3tb51O54kTJyzW3Q/AdsFxJ4riiBEjRowYcda/WpMsXmlskfv4wIzjagc6UHAIYN+2JCRxqcUPi4qK0tPTe/bsuXbt2scee2zChAk1NTWjRo0CgJrqql/96le/evyxZ/7zT1VVvVVVVxRUizQdSqTkNweBmSA5PAAAGEmjGNmjLqcdDaS0JNeg6p7VfXquXffxzJmznv2P3/ap7jv51tsLO2QdO17ncbvDmqaFVSYKkqiINoVRwa+ahuhiosINboQDkmlIIjgoE5nmTbQvmjtj7doPcjLSH/vJrdcMH+S0QzhkOpSIBorNFfV+SXYAAM5BIMzkAkAoGLQ7HNzkhJCQGsJcfsMwnE4nIeTDDetqa2vff//90aNH//LRx8aNG0cIMU3TZnMARHwrmZmZzzzzTHl5OQDs3r172rRphYWF119/vXV78bZfwqL1F3y+CxYsePbZZ3Nzc59++mmXy7V69epp06ZpmtapU6eCgoLevXu//vrrXbt2nTJlytGjR//yl79YucemaW7evHnChAmbNm168cUXXS7XlClTsrKyDh8+/MYbb4RCoYKCgvT0dLTJZFmur68/fPgwISQlJcW6NpvN5vF49uzZg0msV7v1BgBpaWmW2pYV4D9XxyuOOM4L7CeoJLRs2bJnnnlGFMXHHnvM7Xbv2rXr9ddfb25urqqqGjx48OHDh3/6058WFhaOGjVKVdW//OUvaKMAwJEjR7Zv397Q0LBr167nnnsuGAzecccdaWlpoig+99xzBw4cyM7OHjJkCPJjUObG4/FUVlYCQH19PbrbfwDpC3HEEcd5ESsTgT74lJQUh8NRUlJSXl4+d+7cZ599dvfu3cXFxRkZGU6nc9OmTb//3b899NBD1113HYmmO+AZKI2JQ55PytT6mwIoBAZUV3Qt6LB1245FS97/5cMP9hs48Nbb7lCDfkIFr9uu2B2t/mBDQ4Oqqqmpqa2traI7RQJTANOlCAk2MVD/zaFD+155/n+KuxY8ePukQQP65udnYOVSyR67yNKzGoFkErvdjlEOSjilBHmBaMWeOHFixowZ77zzTllZ2dSpUysrK71eLwAgl4wQgkYeAPTq1UtVVWRDLVmyJBwO33nnnenp6VYtPvTDtbX1BgBiOBy+8cYbKyoqpkyZEg6Hc3NzN2zYsH37dkJIt27d3G43lmgtKSl58803CSF33XVXly5dMOcU0+8PHz68ffv2J5988qGHHhIEwTCMTp06ffHFF0eOHMnMzMTgDiGktbW1sbExPT0d3W8YSRRFsX379qh2Gw6HfwB6S/jI4czqFHEDLo5vCewqgiCEw2Gv13v99ddnZGTcfffdoigeP358+/btO3fu3LBhQ+/evceOHbt8+fIZM2Z07Njxs88+O3r06NNPP11ZWYkVDN1ud2JiYjAY/PLLLysrK++++26Xy4UiZ5988glGUiC6U9Q0jRCCc1N9fX1raysO7csTBYgjjjguM2KTorCKFwA4HA7O+ZAhQ/Ly8t5///21a9euXr167Nix5eXlK1asWLlyZVJSUocOHUpLS63SLxZ128LF5egNEwjw7Mz0jIxh2dnZtStW7ti569e/+uXkKbfldMzzJIj+1hbT5O3SUrxuZ/03RwuyUo6eama62i4pgWqhXZ9u3rpxw4lD+2+6fmSfirJ+/SoTPTIQCAY1QSCKIl3ohy2LU9d1dBXhHIvb1wMHDnz44YdLlixpbm5+8MEHkUaCx/t8vtjqpUhbt9vt6IqbM2fOqlWr7rrrrrKyskAg0NLSgnYwpRTLo1nenDaCOHHixOuuu27Lli0LFy48cuRIYmJiUlLS119/3draarfb09PTH3vssZ///Of//u//vnv37ieeeGLUqFEYRG9ubu7QoQPnPCcnp7i4+H//939TUlLS0tI6duw4YMCAG2+8EdMgFEVB8g0uGB6PB+1fQRA0TQuHwxbP5mpXnIoFJvPGxk+/7xbFcXUA63Ii6bi6urqoqGjHjh0LFixobGwMhUJut9vn83HOXS4XY+zee+998sknX3nllaNHj95000033ngjVtxjjDU1Nem67na7O3To8OWXXz777LOlpaVVVVUDBgwYMWKENXlhz3Q4HEjQRAFIrNlgt9vju4444vhBwlqSkCGH0mXIu3U4HLm5uZMnT77uuuvmz58/bdq0L774AtOkFixYoGnaww8/jMIRVq2/WFFJuLANRwAkCkSgnINAoGdJl9KSLus/+nR57Yo/PP3UDTfeNHjocG9ikhoKC4RzPeyQSOOxgwl2l9dtq//mwJraZV98tqV754LJD/1k2KD+XlckE8HQTadNgjP9gmcBZWgBIBQKWZUSJElqbm5GQZDVq1ffeOON11xzTXFxMU6G9fX1KSkpSFBBEU2n02nR1gOBQENDw4IFC/r06TNmzBifz7du3Tq/39+nT5+8vDw0iC8Dl13cv3//c889N3v2bEJIamqqx+PZtm1b586drQSFESNGjBo16vnnnx86dOjkyZMhKniBbD5Jknr27HnnnXeuW7fuZz/7WTgcHjt2bFVV1dixYzt37oyaVWjwYc2GxsbGr7/+ulOnTpiDiTmtLpdLVdXL4G+8DLB4b7GLX5xJE8e3hOWZFkXx448/njFjxtq1a7/++uucnBxCSGNjI7qr0c1WWVk5efLkhx56qLi4eOLEiTjXmKaZnJyclJTk8XgKCgruv//+99577+WXX5ZlOT09vUePHuPHjx85ciROLljgDjeUuI9C1QysXxzvt3HE8UOFVfY+Nm3O4XAcP348IyNj3759n3zySUtLS0JCAor6OhwOn8+3ePFinH/69u1rFeNCwR3LYWGa5oUIGDRaxd4wuWmaRBQHVJf3qy6v7lP5xvQZ8+fNGT9h4tgbb3K5HMBZuyS3zfDZdHPrx1s/eH+RUxYfffCO60eOcNvBUBlwipchipEcB1G4oKOkubk5ISEBADAkCACapu3atWvZsmWzZs0qKyv7/e9/P3DgQLwPaAV+/vnnJ06cEEVx+PDhHo/HikVgXojb7X722WcbGxvHjBljmuZLL720YsWK7Ozszp075+XlQVTAP5ZT2xYQn3322YULF959993XXXddaWnp3r17H3jggdTUVJ/PhxUhPvjgg23bthUUFBw4cGDBggU33XQTXonb7W5ubkYn4T333FNTUzNhwoQDBw5s3Lhx6tSpK1as+POf/1xcXAxRY9/tdicnJ/v9/sOHD4uiaJqmw+FQFKW+vr5bt26qqno8HlQibdMLbmtYvDeLK2oluMURxz8F7obRjNu4ceOqVauGDRt27bXXlpWV+Xy+559/fvbs2RDV7PX5fCtWrOjYseOpU6fWrFmTn5+PQ6y1tfXUqVONjY2iKN5yyy1jx45duXLl3r17P/nkk61bt+7cudNmsw0aNAgAsIQdTuUYSUEVOr/ff7UXtYsjjjguAtynnaXEdvz48YMHD/7pT3967733wuEw6k7gwcFgMDk5WVXVRYsWYUWl0tJSnKlwP2md5yLBNNPQcE0URFmURQ5gcACAIYMG9uzZc+my2oULF364Yd2oUaNaGk6dOPoV89VPe/Wdb459ffO4G2+ZcFN6ciIFBkBFhQJnAMCZYeomFQV60WxxtN4gui4fO3Zs0aJFs2fPzszMfOqppwzDSElJsUy0bdu2LV26dPXq1Zs3b27fvj0A3HTTTQDg9/uRasIYmz179po1ax599NHDhw8/+OCDXq938ODBP//5z7GUFNa/uQwRDHHv3r3Z2dkTJ04sKytDJRHTNBsbG9GQOnXq1Lvvvtvc3Pyb3/zmpZdemjZtWnFxcUFBAaqNoB22b98+xliHDh1KSkoCgcCwYcPy8vJeeumljz76qLi42EosdblcXbt29Xg8hw4dwkqLmqZ9/vnnzc3NpaWlltpIW19wW+MsWy0eQo3jO8ESmgmFQps3b66rqxsxYsTw4cMB4NChQzt27AiHwyinHgqFpk+fvmXLlj/96U9z5syZN29ev379ysvLsfqTy+VKSkpqaWnZuXNn165dR48ePWLEiLq6uunTp//hD3/Ys2fPoEGDrIiDJQAEURkgt9t9tW+l4ogjjosDt22Wi4Ex5vV6nU5nTU1N9+7dP/zww08//VTTtAMHDiiKEgwGGxsbsZTwsmXL0tLSQqFQjx49PB4PUsos2vdF1nFKqSBElTyAEaASAd1gikgz07y33jK+vEfxO+/OWbxg3p69+70ez9SnnxgzauR//PoXRV07yxIFZghUAGCgG8A5SCKRJFGWAChnzGTsQhW5rJKekiTNnDnz3Xff5ZyPHTu2urp6wYIF69ate+qppyRJ8vv933zzzWuvvXbw4MHq6ury8vLMzMwePXrgSTBIyDlvaGg4cOCApmmvv/76l19+ec0112CBpcTExEAgoOs62ouomHtJn9jZEJGmduzYsbKysp07d86dO/fw4cNpaWmmaQYCgX/84x+1tbV33nln//79RVF85JFHZsyYcccdd3Tp0qWuri4vL89ms23atOmtt9667bbbrr32WpfLVVBQ4HK5/H5/fn4+ulUt1Znc3FyPx7N///7NmzdXV1fv2bNn8eLFzc3NXbp0wdXih6F/hqUskFEUWwQpjjj+KXDziqX03G63x+PxeDz19fU2m239+vVfffUV7q98Pt/GjRv/+te/9u/ff9CgQe3btx87duzrr7+enJycl5eHrNOGhoalS5e+8sorkyZNmjRpEmYwJCcn4z4NAFAFDcUaDcMwTZNz3trainpRqqqePHkyPT39+74lccQRxyVGMBjE4kmxWUqEEIfDUVpaikITY8aMOXbs2KFDh06cOIqjAJ0AACAASURBVLFly5aDBw9+/PHHWF6oqalp2rRpjLGMjAxBEJBVhjy5i1YuYYQAMAYU/Wc0HA4IVJIUmQOEdWaTaM+SLoUFv9q6bceMGTO+3LfvkZ8+0KO0OD8/FziAqQMlQE3gHGQKHOtfUSCgqrooSRHT8HzAGXXVqlULFy789NNP+/XrN3LkyMrKSlmWZ82aNWnSpKysrFAo1NLS8uijjyYnJz/++OP9+/f//PPPFUXp2LEjRCsN4q07dOjQ1KlTZVkuLCz8t3/7t3HjxmFJZQBwOp2YtaqqaltbbwAg3Hfffe+///6XX365Y8eOV155RVGUwYMHL1iwwDCMurq6V155pWfPng899FBBQUGXLl0IIa+88kpaWlqfPn0WLlzY3Nw8cODAjh07Ll68uLa2duPGjVu3bn3uueeWLVv205/+dMKECdYmPhAIyLKclZUlCMKCBQvmzJmzd+/eqVOnHjly5NFHHx03btwPgwCHwB4ct97i+BeAgr04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"
    }
   },
   "cell_type": "markdown",
   "id": "a6a8323a",
   "metadata": {},
   "source": [
    "![image_numpy_array%20%281%29.png](attachment:image_numpy_array%20%281%29.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e7bb669",
   "metadata": {},
   "source": [
    "## Creating an array in Numpy\n",
    "\n",
    "arrays can either be vector or matrice. a vector is one dimensional array and a matrix is a two or more dimensional \n",
    "array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a84015be",
   "metadata": {},
   "outputs": [],
   "source": [
    "## importing numpy\n",
    "\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "59e5e37a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 2, 3, 4, 5])"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# creating a simple 3 dimensional array: vector\n",
    "np.array([1,2,3,4,5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8198803a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1,  2,  3,  4,  5],\n",
       "       [ 6,  7,  8,  9, 10]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## creating 2 dimensional array: matrix\n",
    "\n",
    "np. array([(1,2,3,4,5),(6,7,8,9,10)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d166342a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 2, 3, 4, 5])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# creating an array from a list\n",
    "\n",
    "num_list = [1,2,3,4,5]\n",
    "np.array(num_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "36c63ca8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 2 3 4 5]\n"
     ]
    }
   ],
   "source": [
    "print(np.array(num_list))#we can also use print statement"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "47bb38c3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 5,  6,  7],\n",
       "       [ 8,  9, 10],\n",
       "       [11, 12, 13],\n",
       "       [ 1,  2,  3]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## checking the dimension of a Numpy array\n",
    "num_list2 = [[5,6,7],[8,9,10],[11,12,13],[1,2,3]]\n",
    "num_array = np.array(num_list2)\n",
    "num_array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e1d48ffb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num_array.ndim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "283d5577",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4, 3)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## checking the shape of a Numpy array\n",
    "num_array.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "41cc6b68",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1,  2,  3,  4,  5],\n",
       "       [ 6,  7,  8,  9, 10]])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.array ([[1,2,3,4,5],[6,7,8,9,10]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "99473687",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## checking the size of the numpy array\n",
    "\n",
    "num_array.size"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "088b393e",
   "metadata": {},
   "source": [
    "## type() Function and dtype Method\n",
    "\n",
    "everything in python is an object.\n",
    "- suppose you have an object . if you want to know what type of object it is, you will use type() function to know about it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6f0c1093",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "numpy.ndarray"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(num_array)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "302080ed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('int64')"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num_array.dtype"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4079c961",
   "metadata": {},
   "source": [
    "now you know the object is a NumPy ndarray. if you want to know the type of data present in the array. you will use attribute\n",
    "'.dtype'. this is also called type of NumPy array"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da95b41b",
   "metadata": {},
   "source": [
    "## GENERATING ARRAY\n",
    "numpy offers various options to generate an array depending on particular needs such as;\n",
    "- generating array with array()\n",
    "- generating identity array\n",
    "- generating zero array of a given size\n",
    "- generating ones array with a given size\n",
    "- generating an array in a given range\n",
    "- generating an array with random values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b10200ef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1,  5,  6,  7],\n",
       "       [11, 13, 10,  7],\n",
       "       [25, 12,  8,  6]])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## generating array with array()\n",
    "np.array([[1,5,6,7],[11,13,10,7],[25,12,8,6]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "ffe02d56",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## generating array with range()\n",
    "np.arange(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d927293e",
   "metadata": {},
   "source": [
    "here ,10 means arange will generate the first 10 integers starting from 0 .similarly if you pass 5 in bracket,it will\n",
    "generate numbers from 0 to 4(i.e . first five intgers )[0,1,2,3,4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "73408eb9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1. 0. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 0. 1. 0.]\n",
      " [0. 0. 0. 1.]]\n"
     ]
    }
   ],
   "source": [
    "identity_array = np.identity(4)\n",
    "print(identity_array)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "b696f0ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1., 0., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 0., 1., 0.],\n",
       "       [0., 0., 0., 1.]])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## generating an identity matrix of of 1s\n",
    "np.eye(4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "db543fd9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[7., 0., 0., 0.],\n",
       "       [0., 7., 0., 0.],\n",
       "       [0., 0., 7., 0.],\n",
       "       [0., 0., 0., 7.]])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#you can multiply with any constant\n",
    "np.eye(4)*7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "3bd9cb78",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[13.,  0.,  0.,  0.],\n",
       "       [ 0., 13.,  0.,  0.],\n",
       "       [ 0.,  0., 13.,  0.],\n",
       "       [ 0.,  0.,  0., 13.]])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.eye(4)*13"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "d52b1b61",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 0., 0., 0., 0.])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#generating zero arrays of a given size\n",
    "# 1 dimensional zero array\n",
    "np.zeros(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "fd3f55f1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0.]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# creating two dimensional array: pass the tuple of rows and columns 'number #np.zeros(rows,columns)'\n",
    "\n",
    "np.zeros((5,6))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f74a65a0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1., 1., 1., 1., 1.])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#generating ones array of a given size \n",
    "#1 dimensional one array\n",
    "np.ones(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "9846b79f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1., 1., 1., 1., 1., 1.],\n",
       "       [1., 1., 1., 1., 1., 1.],\n",
       "       [1., 1., 1., 1., 1., 1.],\n",
       "       [1., 1., 1., 1., 1., 1.],\n",
       "       [1., 1., 1., 1., 1., 1.]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#creating two dimensional ones array :pass the tuple of rows and columns'number\n",
    "#np.ones(rows,columns)\n",
    "\n",
    "np.ones((5,6))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "42a16162",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 2, 3, 4])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## generating an array in a given range or interval\n",
    "\n",
    "np.arange(0,5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "bc942a8f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18])"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## if you want to control the step size\n",
    "\n",
    "np.arange(0,20,2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "bf7ad886",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(range(0,10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "c1d4db87",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 2, 4, 6, 8]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(range(0,10,2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "456dfc4a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.,  5., 10., 15., 20.])"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# you can also use linspace to generate an evenly spaced numbers in a given interval\n",
    "np.linspace(0,20,5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "fe4c7da2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  0.,  25.,  50.,  75., 100.])"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.linspace(0,100,5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "a232144f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.        ,  1.11111111,  2.22222222,  3.33333333,  4.44444444,\n",
       "        5.55555556,  6.66666667,  7.77777778,  8.88888889, 10.        ])"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.linspace(0,10,10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "7500a488",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.31138471, 0.17872328, 0.17219759, 0.37711939])"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# generating an array with random values\n",
    "# create a 1D array with 4 random numbers \n",
    "\n",
    "np.random.rand(4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "fe52dd05",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.20566158, 0.11732373, 0.48462716, 0.12156964, 0.02143383],\n",
       "       [0.35011827, 0.48795086, 0.29115261, 0.49316607, 0.11900181],\n",
       "       [0.57067724, 0.44470472, 0.32147338, 0.69849668, 0.70228577],\n",
       "       [0.81774661, 0.47183165, 0.25894054, 0.72529322, 0.05446227]])"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.random.rand(4,5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35ba35e8",
   "metadata": {},
   "source": [
    "# generate one random interger in a given range\n",
    "np.random.randint(5,50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "192c67c4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([43, 12, 15,  6, 15, 30, 34, 31,  9, 43])"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## generate 10 random integers in a given range \n",
    "\n",
    "np.random.randint(5,50,10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "bda7c2be",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "41"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# random seed to output the same random values at all run time\n",
    "import random\n",
    "\n",
    "random.seed(10)\n",
    "\n",
    "random.randint(5,50)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc895d9a",
   "metadata": {},
   "source": [
    "## data selection : Indexing and slicing an array"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d257f74",
   "metadata": {},
   "source": [
    "indexing: selecting individual elements from an array\n",
    "    \n",
    "slicing: selecting group of element from the array"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "50b614cd",
   "metadata": {},
   "source": [
    "## Data selection: indexing and slicing an Array\n",
    "\n",
    "indexing : selecting the individual elements from the array\n",
    "slicing: selecting group elements from the array"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2479204d",
   "metadata": {},
   "source": [
    "## ID array indexing and selection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "0c7ec2ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "# creating a 1 dimensional vector\n",
    "\n",
    "array_id = np.array([1,2,3,4,5,])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "8eab8eeb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## indexing :selecting an element from an array\n",
    "\n",
    "array_id[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "0cc81719",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3, 4])"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# slicing returns the group of elements from an array\n",
    "\n",
    "array_id[2:4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "73dba9b0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "array_id[-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "99bc1020",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3, 4])"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#slicing :returning the group of element from an array\n",
    "\n",
    "array_id[2:4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "d8e54b9a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4, 5])"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "array_id[-2:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a2c9ee34",
   "metadata": {},
   "source": [
    "## 2D array indexing and selection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "d4723c27",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 2, 3],\n",
       "       [4, 5, 6],\n",
       "       [7, 8, 9]])"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##vindexing 2d array\n",
    "\n",
    "array_2d = np.array([[1,2,3],[4,5,6],[7,8,9]])\n",
    "array_2d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "68e5acd3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## selecting individual element\n",
    "## array_2d[row][column]\n",
    "## lets select 5.. that is row1,column 1(we start from 0!)\n",
    "\n",
    "array_2d[1][1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "2bdbcd75",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 2, 3],\n",
       "       [4, 5, 6],\n",
       "       [7, 8, 9]])"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "array_2d[:]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "c4c62a12",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 4, 7])"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "array_2d[0:3,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "9b87adea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#lets select 9...that is row 2,column 2\n",
    "array_2d[2][2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "b1135cf6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 2, 3],\n",
       "       [4, 5, 6]])"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## selecting group of elements in 2d array\n",
    "## array_2d[rows,columns]...you select rows and columns\n",
    "\n",
    "## lets select the first two rows and columns\n",
    "## rows: 2 denotes that we are selecting all rows in the second .,\n",
    "## columns: denotes that all columns are selected\n",
    "\n",
    "array_2d[:2,:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "a3c6565f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 2],\n",
       "       [4, 5]])"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "array_2d[0:2,0:2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "e06364ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 2, 3],\n",
       "       [4, 5, 6],\n",
       "       [7, 8, 9]])"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "array_2d = np.array([[1,2,3],[4,5,6],[7,8,9]])\n",
    "array_2d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "ee39ee19",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[4, 5],\n",
       "       [7, 8]])"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "array_2d[ 1:3,0:2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "4fa67b3d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[5, 6],\n",
       "       [8, 9]])"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "array_2d[1:3,1:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "54e0e8fb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 2, 3],\n",
       "       [4, 5, 6]])"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## above is same as\n",
    "\n",
    "array_2d[0:2,:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "50db9188",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 2, 3],\n",
       "       [4, 5, 6],\n",
       "       [7, 8, 9]])"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#this will return all rows,and so all columns and so same as original array\n",
    "array_2d[0:3,:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "6c91cb50",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([7, 8, 9])"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## vreturn the second row \n",
    "array_2d[2,:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "3597fc31",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[2, 3],\n",
       "       [5, 6],\n",
       "       [8, 9]])"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#return the second column \n",
    "array_2d[:,1:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "6af1dd8e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 4, 7])"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#return the first column \n",
    "array_2d[:,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "d459928e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3, 6, 9])"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## return the second column\n",
    "\n",
    "array_2d[:,2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "70ddeb12",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[2, 3],\n",
       "       [5, 6],\n",
       "       [8, 9]])"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# return the last two columns\n",
    "\n",
    "array_2d[:,1:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "ab49c975",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 4, 7])"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## return the first column\n",
    "\n",
    "array_2d[:,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "1b67b6a9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 2, 3])"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## return the first row\n",
    "\n",
    "array_2d[0,:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80b9bc9c",
   "metadata": {},
   "source": [
    "indexing or selecting 2D array may seem confusingh but when you try it multiple times , you get the idea. if you are se\n",
    "lecting an entire row,Indexing or selecting 2D array may seems confusing but when you try it multiples times, you get the idea. If you are selecting an entire row, that means the all the columns are selected(but not their all values). And Vice versa.\n",
    "\n",
    "As shown below, we are selecting the first row, but as you can see all columns are selected(:).\n",
    "\n",
    "    array_2d[0,:]\n",
    "    \n",
    " \n",
    "### 3.3 Conditional selection\n",
    "\n",
    "You can use a condition to select values in an array. Let's use comparison operators to select the values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "7c990e93",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 2, 3],\n",
       "       [4, 5, 6],\n",
       "       [7, 8, 9]])"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#lets create an array \n",
    "\n",
    "arr = np.array(([1,2,3],[4,5,6],[7,8,9]))\n",
    "arr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "1c9c40f8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 2, 3, 4, 5])"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#select all elements in an array which are less than 6\n",
    "arr[arr<6]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "a23fbbe7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([7, 8, 9])"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# select all elements in an array which are greater than 6\n",
    "arr[arr>6]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "c9acc692",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2, 4, 6, 8])"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#select all even numbers in an array\n",
    "\n",
    "arr[arr % 2 ==0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "8d74dbe6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 3, 5, 7, 9])"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## select all odd_numbers in an array\n",
    "\n",
    "arr[arr %2 != 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "ef5fada5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([5, 7, 9])"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## you can also have multiple conditions\n",
    "\n",
    "## in all odd_numbers, return values which are greater or equal to 5\n",
    "\n",
    "arr[(arr % 2 != 0)&(arr >=5)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "0c03142e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[False, False, False],\n",
       "       [False, False,  True],\n",
       "       [ True,  True,  True]])"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## using logical selection, you can also return True for values in which a given condition is met in an array\n",
    "\n",
    "arr>5"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "813f35aa",
   "metadata": {},
   "source": [
    "## Basic array operations\n",
    "\n",
    "## quick arithmetic operation: Addition,Subtraction,Multiplication,Division,Squaring"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "29cf087a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#lets create two arrays\n",
    "arr1 = np.arange(0,5)\n",
    "arr2 = np.arange(6,11)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "df4435f0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 6,  8, 10, 12, 14])"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## addition\n",
    "arr1 + arr2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "6e05471e",
   "metadata": {},
   "outputs": [],
   "source": [
    "## subtraction \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "a7bff7a3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([6, 6, 6, 6, 6])"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr2 - arr1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "450d8f0d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0,  7, 16, 27, 40])"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## multiplication\n",
    "\n",
    "arr1*arr2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "e4afaf39",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.        , 0.14285714, 0.25      , 0.33333333, 0.4       ])"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## division \n",
    "arr1/arr2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "391a70a7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0,  1,  4,  9, 16])"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## squaring\n",
    "arr1 ** 2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "01d01c5b",
   "metadata": {},
   "source": [
    "## universal functions\n",
    "\n",
    "numpy universal functions (`ufunc`) allows to compute math,trigonometric,logical and comparision such as SINE,COSINE,COS,TAN,EXPONENT(exp), log,square,greater,less e.t.c."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "7256f670",
   "metadata": {},
   "outputs": [],
   "source": [
    "## creating two arrays\n",
    "\n",
    "arr1 = np.arange(0,5)\n",
    "arr2 = np.arange(6,11)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "b6f67967",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 6,  8, 10, 12, 14])"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#calculating the sum of two arrays\n",
    "\n",
    "np.add(arr1,arr2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "20738c21",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0,  7, 16, 27, 40])"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## calculating the productb of two arrays\n",
    "\n",
    "np.multiply(arr1,arr2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "d2c87977",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-6, -6, -6, -6, -6])"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# calculating the difference between two arrays\n",
    "\n",
    "np.subtract(arr1,arr2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "7c515757",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.        , 0.14285714, 0.25      , 0.33333333, 0.4       ])"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#calculating the division of two arrays\n",
    "np.divide(arr1,arr2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "2450bf26",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.        ,  0.84147098,  0.90929743,  0.14112001, -0.7568025 ])"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## calculating the sine of arr1\n",
    "\n",
    "np.sin(arr1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "bdefec28",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.        ,  0.84147098,  0.90929743,  0.14112001, -0.7568025 ])"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sin(arr1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "e0fb4626",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.43496553,  0.89399666, -0.80115264])"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sin([0.45,90,180])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "06e65795",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 1.        ,  0.54030231, -0.41614684, -0.9899925 , -0.65364362])"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## calculating the cosine of arr1\n",
    "np.cos(arr1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "e60f3513",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 1.        ,  0.52532199, -0.44807362, -0.59846007])"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.cos([0,45,90,180])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "d7b953a9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-0.29100619,  0.87144798, -6.79971146, -0.45231566,  0.64836083])"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## calculating the tangent (tan) of the array\n",
    "np.tan(arr2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "1f5cfbf1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.79175947, 1.94591015, 2.07944154, 2.19722458, 2.30258509])"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## calculating the logarithmnc(log) of the array\n",
    "np.log(arr2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "d0f8ae85",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  403.42879349,  1096.63315843,  2980.95798704,  8103.08392758,\n",
       "       22026.46579481])"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## calculating the exponent(exp or e^) of the array\n",
    "np.exp(arr2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "9f9e828e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([      0,       1,     256,   19683, 1048576])"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## calculating the power of the array\n",
    "## array 1 is powered array2..0^6=0,1^7=1,2^8=256 etc\n",
    "\n",
    "np.power(arr1,arr2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "63f67a99",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ True,  True,  True,  True,  True])"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### comparison operations return true or false\n",
    "### arr1 is less than arr2...so that's true\n",
    "\n",
    "np.less(arr1,arr2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "27ceb123",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([False, False, False, False, False])"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.greater(arr1,arr2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "089d7f98",
   "metadata": {},
   "source": [
    "## Basic Statistics"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a3933e84",
   "metadata": {},
   "source": [
    "with Numpy, we can compute the basic statistics such as the standard deviation(std),variance(var),mean,median,minimum\n",
    "value,maximum value of an array\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d1552ca",
   "metadata": {},
   "source": [
    "https://numpy.org/doc/stable/reference/routines.statistics.html#order-statistics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "47fc292f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 2, 3, 4])"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#creating an array\n",
    "\n",
    "arr = np.arange(0,5)\n",
    "arr"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "114e8280",
   "metadata": {},
   "source": [
    "## standard deviation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "d30fac22",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.4142135623730951"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# calculating the standard deviation of the array\n",
    "# std is how much an element of an array deviates from the mean of the array\n",
    "\n",
    "np.std(arr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "83e55923",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.118033988749895"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr2 = np.array([[3,4],[5,6]])\n",
    "np.std(arr2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "1820dea7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1., 1.])"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# specifying the axis \n",
    "# by default, the std is computed on the flattened values(or converted into a singlecolumn vector)\n",
    "\n",
    "np.std(arr2,axis = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "e87e8f5e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.5, 0.5])"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.std(arr2,axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ffc42fad",
   "metadata": {},
   "source": [
    " ## variance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "91863677",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.0"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## calculating the variance(var)\n",
    "arr = np.arange(0,5)\n",
    "np.var(arr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "d1997122",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.0"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## mean gives the same results as the average\n",
    "np.average(arr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "809f021f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.0"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Calculating the mean of the array\n",
    "np.mean(arr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "c9bf8145",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.25"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.var(arr2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f8de688",
   "metadata": {},
   "source": [
    "## Mean\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "82bee361",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.0"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Calculating the mean of the array\n",
    "np.mean(arr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "ee39be29",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.0"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## mean gives the same results as average\n",
    "np.average(arr)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b6e91a79",
   "metadata": {},
   "source": [
    "## Median\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "367812ec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.0"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Calculating the emdian of the array\n",
    "np.median(arr)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "df2b4a49",
   "metadata": {},
   "source": [
    "## 5.5 Minimum and Maximum\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "27487ffb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Calculating the minimum value\n",
    "np.min(arr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "ccc23e88",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Calculating the maximum value\n",
    "np.max(arr)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "341cc494",
   "metadata": {},
   "source": [
    "## 6. Data Manipulation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6666dfba",
   "metadata": {},
   "source": [
    "# 6.1 Shape of the array\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "da15daf0",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Creating an array\n",
    "arr1 = np.arange (0,10)\n",
    "arr2 = np.array(([1,2,3],[4,5,6],[7,8,9]))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "1d849ec5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "98a708f9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 2, 3],\n",
       "       [4, 5, 6],\n",
       "       [7, 8, 9]])"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "4d2afb1e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10,)"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.shape(arr1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "8fc60c6f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3, 3)"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.shape(arr2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "5986d94a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3, 3)"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr2.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd5a807f",
   "metadata": {},
   "source": [
    "## 6.2 Shaping the Array\n",
    "np.reshape(array_name, newshape=(rows,columns)) or array_name.reshape(rows,columns) chjange the shape of the array. The rows and columns of the new shape has to conform with the existing data of the array. Otherwise it won't work. Take an example, you can convert (3,3) array into (1,9) but you can't convert it into (5,5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "70ad48af",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 1],\n",
       "       [2, 3],\n",
       "       [4, 5],\n",
       "       [6, 7],\n",
       "       [8, 9]])"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## arr1 is (10)....10 rows, 1 column. Let's reshape it into (5,2)\n",
    "np.reshape(arr1, newshape=(5,2))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "bc19a974",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 1],\n",
       "       [2, 3],\n",
       "       [4, 5],\n",
       "       [6, 7],\n",
       "       [8, 9]])"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## This would also work\n",
    "arr1.reshape(5,2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "42cdb0c2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 2, 3, 4, 5, 6, 7, 8, 9]])"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr2_reshaped = arr2.reshape(9,1) \n",
    "arr2_reshaped.T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "5059dae3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 2, 3],\n",
       "       [4, 5, 6],\n",
       "       [7, 8, 9]])"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr2_reshaped.reshape(3,3)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "6503a527",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 2, 3, 4, 5, 6, 7, 8, 9]])"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## np.resize can also be used to change the shape of the array into a specific size\n",
    "np.resize(arr2, (1,9))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "138afb8d",
   "metadata": {},
   "source": [
    "## 6. 3Copying array\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "af0b42d1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr1 = np.arange(0,10)\n",
    "arr1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "f01e406d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr1_copy= arr1.copy()\n",
    "arr1_copy\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "2bb86efa",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Copying the Values of one array into the other\n",
    "## Let's copy array 2 into 1 -- they have the same shape arr1 = np.arange(0,6)\n",
    "arr1 = np.arange(0,6)\n",
    "arr2 = np.arange(6,12)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "a1c0d3cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "## arr1 is destination, arr2 is source\n",
    "np.copyto(arr1,arr2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "02e80ab7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 6,  7,  8,  9, 10, 11])"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr1\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bed4cde7",
   "metadata": {},
   "source": [
    "# 6.4 Joining arrays"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "babd8ca7",
   "metadata": {},
   "outputs": [],
   "source": [
    "### Creating two arrays\n",
    "arr1=np.array([[1,2,3],[4,5,6],[7,8,9]]) \n",
    "arr2= np.array([[10,11,12]])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "8b973e1f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 3)"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr2.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "1a907f1e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1,  2,  3],\n",
       "       [ 4,  5,  6],\n",
       "       [ 7,  8,  9],\n",
       "       [10, 11, 12]])"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Joining them\n",
    "np.concatenate((arr1,arr2))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "07fff54d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1,  2,  3, 10],\n",
       "       [ 4,  5,  6, 11],\n",
       "       [ 7,  8,  9, 12]])"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##Transposinh arr2\n",
    "##arr2. T is transpose operation\n",
    "np.concatenate((arr1, arr2.T), axis=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "e4125461",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12])"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### Setting axis to none flatten the array\n",
    "np.concatenate((arr1,arr2), axis=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "0ba06c01",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0,  6],\n",
       "       [ 1,  7],\n",
       "       [ 2,  8],\n",
       "       [ 3,  9],\n",
       "       [ 4, 10],\n",
       "       [ 5, 11]])"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### Joining two IDs array into 2D array: Stacking\n",
    "# Column stacking\n",
    "\n",
    "arr1 = np.arange(0,6) \n",
    "arr2 = np.arange(6,12)\n",
    "\n",
    "np.column_stack((arr1,arr2))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "32fa4605",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0,  1,  2,  3,  4,  5],\n",
       "       [ 6,  7,  8,  9, 10, 11]])"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Row statcking\n",
    "np.row_stack((arr1,arr2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35c54acd",
   "metadata": {},
   "source": [
    "## 6.5 Splitting arrays\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "32bde9c3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 2, 3, 4, 5])"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "arr1 = np.arange(0,6) \n",
    "arr1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "b8ff5591",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array([0, 1]), array([2, 3]), array([4, 5])]"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### Splitting the array into two arrays\n",
    "np.split(arr1,3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43ba0f07",
   "metadata": {},
   "source": [
    "## 6.6 Adding and repeating elements in an array\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "93884ecd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 2, 3, 4, 5])"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr1 = np.arange(0,6) \n",
    "arr1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "88d88ef9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 2, 3, 4, 5, 7])"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## adding the values at the end of the array\n",
    "np.append(arr1,7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "ae27a0ff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 2, 3, 1, 2, 3, 1, 2, 3]])"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### Given an array, can add itself multiple times? or repeat it?\n",
    "arr = np.array([[1,2,3]]) \n",
    "np.tile(arr,3)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "a8c191f7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 1, 1, 2, 2, 2, 3, 3, 3])"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.repeat(arr,3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "696c1599",
   "metadata": {},
   "source": [
    "## 6.7 Sorting elements in an array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "3b3fd924",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 2, 3, 4, 5, 6, 7, 9])"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Finding the unique elements in an array\n",
    "arr = np.array([[1,2,3,4,5,3,2,1,3,5,6,7,7,5,9,5]]) \n",
    "np.unique(arr)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "efd82c9b",
   "metadata": {},
   "source": [
    "# 6.8 Reversing an array\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "73b3b0d2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 2, 3],\n",
       "       [4, 5, 6],\n",
       "       [7, 8, 9]])"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## You can also flup the arry\n",
    "arr = np.array([[1,2,3],[4,5,6],[7,8,9]]) \n",
    "arr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "58b180d2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[7, 8, 9],\n",
       "       [4, 5, 6],\n",
       "       [1, 2, 3]])"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## up/down flipping\n",
    "np.flipud(arr)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "3ef7839d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[3, 2, 1],\n",
       "       [6, 5, 4],\n",
       "       [9, 8, 7]])"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## left/right flipping\n",
    "np.fliplr(arr)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c8fec09",
   "metadata": {},
   "source": [
    "## That's it for NumPy. In this lab, you learned how to create an array, perform basic operations and also how to manipulate an array. In the next lab, we willl learn about the Pandas, another important tool used for real world data manipulation.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29648b45",
   "metadata": {},
   "source": [
    "# BACK TO TOP"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ed001d9",
   "metadata": {},
   "source": [
    "# create a 3 dimensional numpy array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "24d5a9be",
   "metadata": {},
   "outputs": [],
   "source": [
    "array_3d = np.array([[[1,2,3],[6,7,8],[9,10,11]],\n",
    "                    [[12,13,14],[15,16,17],[18,19,20]],\n",
    "                    [[21,22,23],[24,25,26],[27,28,29]]])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "4f2515ad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[ 1,  2,  3],\n",
       "        [ 6,  7,  8],\n",
       "        [ 9, 10, 11]],\n",
       "\n",
       "       [[12, 13, 14],\n",
       "        [15, 16, 17],\n",
       "        [18, 19, 20]],\n",
       "\n",
       "       [[21, 22, 23],\n",
       "        [24, 25, 26],\n",
       "        [27, 28, 29]]])"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "array_3d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "4347daf9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "array_3d.ndim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "80c56f31",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3, 3, 3)"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "array_3d.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "a0db1ea3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "27"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "array_3d.size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4e632c11",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
